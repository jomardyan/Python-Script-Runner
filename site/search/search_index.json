{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Python Script Runner","text":"<p>Enterprise-grade Python script execution engine with real-time monitoring, alerting, analytics, and distributed execution.</p> <p> </p>"},{"location":"#overview","title":"Overview","text":"<p>Python Script Runner transforms script execution into a production-ready operation with:</p> <ul> <li>\ud83d\udd0d Real-Time Monitoring - CPU, memory, I/O tracking with &lt;2% overhead</li> <li>\ud83d\udce2 Multi-Channel Alerts - Email, Slack, webhooks with threshold-based logic</li> <li>\ud83d\udcca Historical Analytics - SQLite backend with trend analysis &amp; anomaly detection</li> <li>\ud83d\udd04 Retry Strategies - Linear, exponential, Fibonacci backoff with smart filtering</li> <li>\ud83d\udcc8 Advanced Profiling - CPU/memory/I/O analysis with bottleneck identification</li> <li>\ud83c\udfe2 Enterprise Ready - Datadog, Prometheus, New Relic integrations</li> <li>\ud83c\udf10 Distributed Execution - SSH, Docker, Kubernetes support</li> <li>\ud83d\udcca Web Dashboard - Real-time metrics visualization &amp; RESTful API</li> <li>\ud83e\udd16 ML-Powered - Anomaly detection, forecasting, correlation analysis</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code># Installation\ngit clone https://github.com/jomardyan/Python-Script-Runner.git\ncd Python-Script-Runner\npip install -r requirements.txt\n\n# Run\npython runner.py myscript.py\n</code></pre>"},{"location":"#key-features","title":"Key Features","text":"Feature Description Status Real-Time Monitoring CPU, memory, I/O, system resources \u2705 Production Alert System Email, Slack, webhooks, custom handlers \u2705 Production CI/CD Integration Performance gates, JUnit/TAP output \u2705 Production Historical Tracking SQLite database with metrics persistence \u2705 Production Trend Analysis Linear regression, anomaly detection \u2705 Production Multi-Script Workflows DAG-based orchestration with dependencies \u2705 Production Data Export CSV, JSON, Parquet formats \u2705 Production ML Anomaly Detection Z-score, IQR, trend-based methods \u2705 Production Metrics Correlation Pearson correlation, predictor analysis \u2705 Production Performance Benchmarking Regression detection, version comparison \u2705 Production"},{"location":"#documentation","title":"Documentation","text":"<ul> <li>\ud83d\udcd6 Installation - Setup and requirements</li> <li>\ud83d\ude80 Quick Start - First steps guide</li> <li>\ud83d\udcda Usage Guide - Common use cases</li> <li>\ud83d\udd27 CLI Reference - Command-line options</li> <li>\u2699\ufe0f Configuration - Config file guide</li> <li>\ud83d\udd04 CI/CD Integration - Pipeline setup</li> <li>\ud83d\udce1 API Documentation - Python API reference</li> <li>\ud83d\udcca Metrics Guide - Metrics details</li> <li>\ud83c\udfd7\ufe0f Architecture - System design</li> <li>\ud83d\udd2c Advanced Features - Advanced topics</li> <li>\ud83d\udc1b Troubleshooting - Common issues</li> </ul>"},{"location":"#getting-help","title":"Getting Help","text":"<ul> <li>\ud83d\udccb Issues</li> <li>\ud83d\udcac Discussions</li> </ul>"},{"location":"#license","title":"License","text":"<p>MIT License - see LICENSE for details.</p> <p>Version: 4.2.0 | Status: Production Ready | Last Updated: October 2025</p>"},{"location":"advanced/","title":"Advanced Features","text":"<p>Comprehensive guide to advanced Python Script Runner features</p>"},{"location":"advanced/#available-features-20","title":"Available Features (20)","text":"<ul> <li>HISTORICAL DATA TRACKING (SQLite Backend)</li> <li>TREND ANALYSIS &amp; REGRESSION DETECTION</li> <li>AUTO-BASELINE CALCULATION</li> <li>STRUCTURED LOGGING &amp; LOG ANALYSIS</li> <li>TIME-SERIES QUERY API</li> <li>MULTI-SCRIPT ORCHESTRATION WITH DAG SUPPORT</li> <li>DATA EXPORT &amp; RETENTION POLICIES</li> <li>PERFORMANCE OPTIMIZATION ENGINE</li> <li>ADVANCED SCHEDULING SYSTEM</li> <li>MACHINE LEARNING ANOMALY DETECTION</li> <li>ADVANCED METRICS CORRELATION ANALYSIS</li> <li>PERFORMANCE BENCHMARKING FRAMEWORK</li> <li>ALERT INTELLIGENCE &amp; TUNING</li> <li>ADVANCED DEBUGGING &amp; PROFILING</li> <li>ENTERPRISE INTEGRATIONS</li> <li>RESOURCE PREDICTION &amp; FORECASTING</li> <li>DISTRIBUTED EXECUTION SUPPORT</li> <li>ADVANCED RETRY &amp; RECOVERY STRATEGIES</li> <li>ALERTING &amp; NOTIFICATION SYSTEM</li> <li>CI/CD PIPELINE INTEGRATION</li> </ul>"},{"location":"advanced/#trend-analysis","title":"Trend Analysis","text":"<p>Automatically analyze performance trends:</p> <pre><code>from runner import TrendAnalyzer\n\nanalyzer = TrendAnalyzer()\ntrend = analyzer.calculate_linear_regression(values)\n# Returns: slope, intercept, r_squared, trend direction\n</code></pre>"},{"location":"advanced/#anomaly-detection","title":"Anomaly Detection","text":"<p>Detect anomalies using multiple methods:</p> <pre><code># IQR method\nanomalies = analyzer.detect_anomalies(values, method='iqr')\n\n# Z-score method\nanomalies = analyzer.detect_anomalies(values, method='zscore')\n\n# MAD method\nanomalies = analyzer.detect_anomalies(values, method='mad')\n</code></pre>"},{"location":"advanced/#baseline-calculation","title":"Baseline Calculation","text":"<p>Intelligent baseline calculation:</p> <pre><code>from runner import BaselineCalculator\n\ncalc = BaselineCalculator()\nbaseline = calc.calculate_intelligent_baseline(values)\n# Auto-selects best method based on data characteristics\n</code></pre>"},{"location":"advanced/#workflow-orchestration","title":"Workflow Orchestration","text":"<p>Execute multiple scripts with DAG support:</p> <pre><code>from runner import ScriptWorkflow\n\nworkflow = ScriptWorkflow('pipeline')\nworkflow.add_script('etl', 'etl.py')\nworkflow.add_script('train', 'train.py', dependencies=['etl'])\nworkflow.add_script('eval', 'eval.py', dependencies=['train'])\nresult = workflow.execute()\n</code></pre>"},{"location":"advanced/#performance-optimization","title":"Performance Optimization","text":"<p>Get optimization recommendations:</p> <pre><code>from runner import PerformanceOptimizer\n\noptimizer = PerformanceOptimizer(history_manager)\nreport = optimizer.get_optimization_report('script.py')\nprint(report)\n</code></pre>"},{"location":"advanced/#alert-intelligence","title":"Alert Intelligence","text":"<p>Smart alert management:</p> <pre><code>from runner import AlertIntelligence\n\nintel = AlertIntelligence()\n# Deduplicate alerts\nalerts = intel.deduplicate_alerts(raw_alerts)\n# Calculate adaptive thresholds\nthreshold = intel.calculate_adaptive_threshold('cpu', values)\n</code></pre>"},{"location":"advanced/#benchmarking","title":"Benchmarking","text":"<p>Performance regression detection:</p> <pre><code>from runner import BenchmarkManager\n\nbm = BenchmarkManager()\nbm.create_benchmark('v1.0', script_path='script.py')\n# Later...\ncomparison = bm.compare_benchmarks('v1.0', 'v2.0')\nregressions = bm.detect_regressions('benchmark_name')\n</code></pre>"},{"location":"api/","title":"API Reference","text":"<p>Complete Python API documentation for Python Script Runner</p>"},{"location":"api/#overview","title":"Overview","text":"<p>Python Script Runner provides a comprehensive Python API with 32 main classes.</p>"},{"location":"api/#core-classes","title":"Core Classes","text":""},{"location":"api/#advancedprofiler","title":"AdvancedProfiler","text":"<p>Advanced CPU/memory/I/O profiling with call stack and system call tracing.</p> <p>Methods:</p> <ul> <li><code>profile_cpu_and_memory()</code> - Profile CPU and memory usage with high-frequency sampling</li> <li><code>io_profile()</code> - Profile I/O operations (disk reads/writes)</li> <li><code>get_profile_summary()</code> - Get summary of profiling results</li> </ul>"},{"location":"api/#alert","title":"Alert","text":"<p>Represents an alert configuration</p> <p>Methods:</p> <ul> <li><code>should_trigger()</code> - Evaluate if alert should trigger based on metrics</li> <li><code>can_trigger()</code> - Check if alert is not throttled</li> <li><code>mark_triggered()</code> - Mark alert as triggered</li> </ul>"},{"location":"api/#alertchannel","title":"AlertChannel","text":"<p>Available alert channels</p>"},{"location":"api/#alertintelligence","title":"AlertIntelligence","text":"<p>Intelligent alert management with auto-tuning, deduplication, and context-aware routing.</p> <p>Methods:</p> <ul> <li><code>deduplicate_alerts()</code> - Remove duplicate alerts within a time window</li> <li><code>calculate_adaptive_threshold()</code> - Calculate adaptive thresholds based on metric history</li> <li><code>analyze_alert_patterns()</code> - Analyze alert patterns to identify recurring issues</li> <li><code>suggest_alert_routing()</code> - Suggest intelligent routing for an alert based on context</li> </ul>"},{"location":"api/#alertmanager","title":"AlertManager","text":"<p>Manages alerts and notifications</p> <p>Methods:</p> <ul> <li><code>add_alert()</code> - Add a new alert configuration</li> <li><code>configure_email()</code> - Configure email notifications</li> <li><code>configure_slack()</code> - Configure Slack webhook notifications</li> <li><code>configure_webhook()</code> - Configure custom webhook notifications</li> <li><code>check_alerts()</code> - Check all alerts against current metrics</li> </ul>"},{"location":"api/#alertseverity","title":"AlertSeverity","text":"<p>Alert severity levels</p>"},{"location":"api/#baselinecalculator","title":"BaselineCalculator","text":"<p>Automatically calculate intelligent performance baselines from historical data.</p> <p>Methods:</p> <ul> <li><code>calculate_from_percentile()</code> - Calculate baseline using percentile method</li> <li><code>calculate_with_iqr_filtering()</code> - Calculate baseline using IQR method to exclude outliers</li> <li><code>calculate_intelligent_baseline()</code> - Calculate intelligent baseline automatically selecting optimal method.</li> <li><code>calculate_time_based_baseline()</code> - Calculate baseline comparing recent performance to historical</li> </ul>"},{"location":"api/#benchmarkmanager","title":"BenchmarkManager","text":"<p>Manage performance benchmarks and detect regressions between versions.</p> <p>Methods:</p> <ul> <li><code>create_benchmark()</code> - Create a performance benchmark from current metrics</li> <li><code>compare_benchmarks()</code> - Compare two benchmark versions to detect changes</li> <li><code>detect_regressions()</code> - Detect performance regressions in a benchmark</li> <li><code>list_benchmarks()</code> - List all benchmarks or versions of a specific benchmark</li> </ul>"},{"location":"api/#cicdintegration","title":"CICDIntegration","text":"<p>CI/CD pipeline integration features</p> <p>Methods:</p> <ul> <li><code>add_performance_gate()</code> - Add a performance gate</li> <li><code>check_gates()</code> - Check all performance gates</li> <li><code>load_baseline()</code> - Load baseline metrics from file</li> <li><code>save_baseline()</code> - Save current metrics as baseline</li> <li><code>compare_with_baseline()</code> - Compare current metrics with baseline</li> </ul>"},{"location":"api/#dataexporter","title":"DataExporter","text":"<p>Export metrics to various formats (CSV, JSON, Parquet)</p> <p>Methods:</p> <ul> <li><code>export_to_csv()</code> - Export metrics to CSV file</li> <li><code>export_to_json()</code> - Export metrics to JSON file</li> <li><code>export_to_parquet()</code> - Export metrics to Parquet file (requires pyarrow)</li> </ul>"},{"location":"api/#enterpriseintegrations","title":"EnterpriseIntegrations","text":"<p>Integrate with enterprise monitoring platforms (DataDog, New Relic, Prometheus, etc).</p> <p>Methods:</p> <ul> <li><code>send_to_datadog()</code> - Send metrics to Datadog</li> <li><code>send_to_prometheus()</code> - Send metrics to Prometheus via Pushgateway</li> <li><code>send_to_newrelic()</code> - Send metrics to New Relic</li> <li><code>get_integration_status()</code> - Get status of all configured integrations</li> </ul>"},{"location":"api/#executionhook","title":"ExecutionHook","text":"<p>Hook system for custom pre/post execution logic.</p> <p>Methods:</p> <ul> <li><code>register_pre_hook()</code> - Register pre-execution hook function.</li> <li><code>register_post_hook()</code> - Register post-execution hook function.</li> <li><code>execute_pre_hooks()</code> - Execute all registered pre-execution hooks.</li> <li><code>execute_post_hooks()</code> - Execute all registered post-execution hooks.</li> </ul>"},{"location":"api/#historymanager","title":"HistoryManager","text":"<p>Manages persistent storage and retrieval of execution metrics using SQLite.</p> <p>Methods:</p> <ul> <li><code>save_execution()</code> - Save execution metrics to database.</li> <li><code>save_alerts()</code> - Save triggered alerts for an execution</li> <li><code>get_execution_history()</code> - Retrieve execution history with optional filtering.</li> <li><code>get_metrics_for_script()</code> - Get all values of a specific metric for a script over time</li> <li><code>get_aggregated_metrics()</code> - Get aggregated statistics for metrics</li> </ul>"},{"location":"api/#loganalyzer","title":"LogAnalyzer","text":"<p>Analyzes logs and detects error patterns and anomalies.</p> <p>Methods:</p> <ul> <li><code>extract_error_patterns()</code> - Extract error patterns from text.</li> <li><code>analyze_execution_log()</code> - Comprehensive analysis of execution logs.</li> <li><code>generate_summary()</code> - Generate summary statistics from multiple analyses.</li> </ul>"},{"location":"api/#mlanomalydetector","title":"MLAnomalyDetector","text":"<p>Machine learning-based anomaly detection for metrics</p> <p>Methods:</p> <ul> <li><code>detect_anomalies_zscore()</code> - Detect anomalies using Z-score method</li> <li><code>detect_anomalies_iqr()</code> - Detect anomalies using Interquartile Range method</li> <li><code>detect_trend_anomalies()</code> - Detect anomalies based on trend changes</li> <li><code>get_predictive_baseline()</code> - Calculate predictive baseline using statistical methods</li> </ul>"},{"location":"api/#metricscorrelationanalyzer","title":"MetricsCorrelationAnalyzer","text":"<p>Analyzes correlations between different metrics to identify relationships and dependencies.</p> <p>Methods:</p> <ul> <li><code>analyze_metric_correlations()</code> - Analyze correlations between all available metrics</li> <li><code>find_metric_predictors()</code> - Find metrics that predict or strongly correlate with a target metric</li> <li><code>detect_metric_dependencies()</code> - Detect lagged dependencies between metrics (X at time t predicts Y at time t+lag)</li> </ul>"},{"location":"api/#performancegate","title":"PerformanceGate","text":"<p>Performance gate for CI/CD integration</p> <p>Methods:</p> <ul> <li><code>check()</code> - Check if gate passes</li> </ul>"},{"location":"api/#performanceoptimizer","title":"PerformanceOptimizer","text":"<p>Analyze metrics and provide optimization recommendations</p> <p>Methods:</p> <ul> <li><code>analyze_script_performance()</code> - Analyze script performance and generate recommendations</li> <li><code>get_optimization_report()</code> - Generate a human-readable optimization report</li> </ul>"},{"location":"api/#processmonitor","title":"ProcessMonitor","text":"<p>Monitor child process resource usage during execution.</p> <p>Methods:</p> <ul> <li><code>start()</code> - </li> <li><code>stop()</code> - </li> <li><code>get_summary()</code> - Get aggregated monitoring summary statistics.</li> </ul>"},{"location":"api/#remoteexecutor","title":"RemoteExecutor","text":"<p>Execute scripts on remote machines and containers</p> <p>Methods:</p> <ul> <li><code>execute_ssh()</code> - Execute script on remote host via SSH</li> <li><code>execute_docker()</code> - Execute script in Docker container</li> <li><code>execute_kubernetes()</code> - Execute script as Kubernetes Job</li> </ul>"},{"location":"api/#resourceforecaster","title":"ResourceForecaster","text":"<p>Predict future resource needs and forecast SLA compliance.</p> <p>Methods:</p> <ul> <li><code>forecast_metric()</code> - Forecast metric values for future periods</li> <li><code>predict_sla_compliance()</code> - Predict SLA compliance based on forecasted metrics</li> <li><code>estimate_capacity_needs()</code> - Estimate capacity needs based on metric growth</li> </ul>"},{"location":"api/#retentionpolicy","title":"RetentionPolicy","text":"<p>Configurable data retention and archival policies (compliance: SOC2, HIPAA)</p> <p>Methods:</p> <ul> <li><code>add_policy()</code> - Add retention policy</li> <li><code>apply_policy()</code> - Apply retention policy</li> <li><code>get_policies()</code> - Get all configured policies</li> </ul>"},{"location":"api/#retryconfig","title":"RetryConfig","text":"<p>Configuration for retry behavior with multiple backoff strategies</p> <p>Methods:</p> <ul> <li><code>get_delay()</code> - Calculate delay for given attempt number (0-indexed)</li> <li><code>should_retry()</code> - Determine if retry should be attempted</li> <li><code>get_retry_info()</code> - Get human-readable retry configuration</li> </ul>"},{"location":"api/#retrystrategy","title":"RetryStrategy","text":"<p>Available retry backoff strategies</p>"},{"location":"api/#scheduledtask","title":"ScheduledTask","text":"<p>Represents a scheduled task</p>"},{"location":"api/#scriptnode","title":"ScriptNode","text":"<p>Represents a script node in a DAG</p> <p>Methods:</p> <ul> <li><code>add_dependency()</code> - Add a dependency on another script</li> </ul>"},{"location":"api/#scriptrunner","title":"ScriptRunner","text":"<p>Enhanced wrapper class to run Python scripts with comprehensive metrics collection.</p> <p>Methods:</p> <ul> <li><code>load_config()</code> - Load runner configuration from YAML file.</li> <li><code>collect_system_metrics_start()</code> - </li> <li><code>collect_system_metrics_end()</code> - </li> <li><code>validate_script()</code> - Validate script exists and is readable before execution.</li> <li><code>run_script()</code> - Execute script with advanced retry and monitoring capabilities.</li> </ul>"},{"location":"api/#scriptworkflow","title":"ScriptWorkflow","text":"<p>DAG-based multi-script orchestration engine (68% demand feature)</p> <p>Methods:</p> <ul> <li><code>add_script()</code> - Add script to workflow</li> <li><code>build_dag()</code> - Build DAG and validate for cycles</li> <li><code>get_executable_scripts()</code> - Get scripts ready to execute (all dependencies met)</li> <li><code>execute()</code> - Execute workflow sequentially</li> <li><code>get_statistics()</code> - Get workflow execution statistics</li> </ul>"},{"location":"api/#structuredlogger","title":"StructuredLogger","text":"<p>Provides structured JSON logging for all events.</p> <p>Methods:</p> <ul> <li><code>log_event()</code> - Log a structured event.</li> <li><code>get_logs()</code> - Retrieve logs with optional filtering.</li> </ul>"},{"location":"api/#taskscheduler","title":"TaskScheduler","text":"<p>Manages scheduled script execution and event-driven triggers</p> <p>Methods:</p> <ul> <li><code>add_scheduled_task()</code> - Add a scheduled task</li> <li><code>add_event_trigger()</code> - Add event trigger for a task</li> <li><code>trigger_event()</code> - Trigger an event and return tasks to execute</li> <li><code>get_due_tasks()</code> - Get tasks that are due for execution</li> <li><code>mark_executed()</code> - Mark task as executed</li> </ul>"},{"location":"api/#timeseriesdb","title":"TimeSeriesDB","text":"<p>Advanced time-series query API for metrics with flexible filtering and aggregations</p> <p>Methods:</p> <ul> <li><code>query()</code> - Query metrics with flexible filtering</li> <li><code>aggregate()</code> - Aggregate metric values using specified method</li> <li><code>aggregations()</code> - Calculate multiple aggregations at once</li> <li><code>bucket()</code> - Downsample metrics into time buckets for large datasets</li> <li><code>metrics_list()</code> - Get list of available metrics for query context</li> </ul>"},{"location":"api/#trendanalyzer","title":"TrendAnalyzer","text":"<p>Analyze trends in metrics and detect performance regressions.</p> <p>Methods:</p> <ul> <li><code>calculate_linear_regression()</code> - Calculate linear regression trend line for metric values.</li> <li><code>detect_anomalies()</code> - Detect anomalies in metric values using statistical methods.</li> <li><code>detect_regression()</code> - Detect performance regressions (significant increases in metric values)</li> <li><code>calculate_percentiles()</code> - Calculate key percentiles for a metric series</li> <li><code>analyze_metric_history()</code> - Comprehensive analysis of a metric's history</li> </ul>"},{"location":"api/#usage-examples","title":"Usage Examples","text":""},{"location":"api/#basic-execution","title":"Basic Execution","text":"<pre><code>from runner import ScriptRunner\n\nrunner = ScriptRunner('myscript.py')\nresult = runner.execute()\nprint(f\"Exit code: {result['exit_code']}\")\n</code></pre>"},{"location":"api/#with-history-tracking","title":"With History Tracking","text":"<pre><code>from runner import ScriptRunner, HistoryManager\n\nhistory = HistoryManager('metrics.db')\nrunner = ScriptRunner('script.py', history_manager=history)\nresult = runner.execute()\n</code></pre>"},{"location":"api/#with-alerts","title":"With Alerts","text":"<pre><code>from runner import ScriptRunner, AlertManager\n\nrunner = ScriptRunner('script.py')\nalerts = AlertManager()\nalerts.add_alert('cpu_high', 'cpu_max &gt; 80')\nresult = runner.execute()\n</code></pre>"},{"location":"api/#workflow-orchestration","title":"Workflow Orchestration","text":"<pre><code>from runner import ScriptWorkflow\n\nworkflow = ScriptWorkflow('my_pipeline', max_parallel=4)\nworkflow.add_script('task1', 'script1.py')\nworkflow.add_script('task2', 'script2.py', dependencies=['task1'])\nresult = workflow.execute()\n</code></pre>"},{"location":"architecture/","title":"Architecture Guide","text":"<p>Deep dive into Python Script Runner's design and components</p>"},{"location":"architecture/#system-architecture","title":"System Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502         Python Script Runner                \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                                             \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502  Execution Engine                   \u2502   \u2502\n\u2502  \u2502  - Subprocess management           \u2502   \u2502\n\u2502  \u2502  - Timeout handling                \u2502   \u2502\n\u2502  \u2502  - Exit code processing            \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2502                    \u2193                        \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502  Real-Time Monitoring               \u2502   \u2502\n\u2502  \u2502  - CPU/Memory/I/O metrics          \u2502   \u2502\n\u2502  \u2502  - Process profiling                \u2502   \u2502\n\u2502  \u2502  - Resource tracking                \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2502                    \u2193                        \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502  Analytics Pipeline                 \u2502   \u2502\n\u2502  \u2502  - Trend analysis                   \u2502   \u2502\n\u2502  \u2502  - Anomaly detection                \u2502   \u2502\n\u2502  \u2502  - ML correlation                   \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2502                    \u2193                        \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502  Persistent Storage (SQLite)        \u2502   \u2502\n\u2502  \u2502  - Execution records                \u2502   \u2502\n\u2502  \u2502  - Metrics database                 \u2502   \u2502\n\u2502  \u2502  - Alert history                    \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2502                    \u2193                        \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502  Alert &amp; Notification               \u2502   \u2502\n\u2502  \u2502  - Email alerts                     \u2502   \u2502\n\u2502  \u2502  - Slack integration                \u2502   \u2502\n\u2502  \u2502  - Webhook support                  \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2502                                             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"architecture/#core-components","title":"Core Components","text":""},{"location":"architecture/#1-execution-engine","title":"1. Execution Engine","text":"<ul> <li>Manages subprocess execution</li> <li>Handles timeouts and cancellation</li> <li>Captures stdout/stderr</li> <li>Processes exit codes</li> </ul>"},{"location":"architecture/#2-monitoring-system","title":"2. Monitoring System","text":"<ul> <li>Real-time CPU/memory tracking</li> <li>I/O operation monitoring</li> <li>System resource profiling</li> <li>&lt;2% overhead guarantee</li> </ul>"},{"location":"architecture/#3-analytics-engine","title":"3. Analytics Engine","text":"<ul> <li>Trend analysis with linear regression</li> <li>Anomaly detection (IQR, Z-score, MAD methods)</li> <li>Regression detection</li> <li>Metrics correlation analysis</li> </ul>"},{"location":"architecture/#4-storage-layer","title":"4. Storage Layer","text":"<ul> <li>SQLite database for persistence</li> <li>Efficient indexing for queries</li> <li>Time-series data support</li> <li>Retention policy management</li> </ul>"},{"location":"architecture/#5-alert-system","title":"5. Alert System","text":"<ul> <li>Rule-based alert triggering</li> <li>Multi-channel notifications</li> <li>Alert deduplication</li> <li>Adaptive thresholds</li> </ul>"},{"location":"architecture/#data-flow","title":"Data Flow","text":"<pre><code>Script Execution \u2192 Metrics Collection \u2192 Storage \u2192 Analysis\n                                           \u2193\n                    Alert Triggers \u2190 Threshold Evaluation\n                           \u2193\n                   Notification Delivery\n</code></pre>"},{"location":"architecture/#performance-characteristics","title":"Performance Characteristics","text":"Component Latency Throughput Monitoring &lt;1ms sample 10k metrics/sec Alert Check &lt;10ms 1k alerts/sec Database Query &lt;100ms 10k records/sec Analysis &lt;500ms 100 analyses/sec"},{"location":"cicd/","title":"CI/CD Integration","text":"<p>Integrate Python Script Runner with CI/CD pipelines</p>"},{"location":"cicd/#github-actions","title":"GitHub Actions","text":"<pre><code>name: Test with Performance Gates\n\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - uses: actions/setup-python@v2\n        with:\n          python-version: '3.11'\n      - run: pip install -r requirements.txt\n      - run: python runner.py tests/suite.py \\\n            --add-gate cpu_max:90 \\\n            --add-gate memory_max_mb:1024 \\\n            --junit-output test-results.xml\n      - name: Publish results\n        uses: EnricoMi/publish-unit-test-result-action@v2\n        with:\n          files: test-results.xml\n</code></pre>"},{"location":"cicd/#gitlab-ci","title":"GitLab CI","text":"<pre><code>test:\n  stage: test\n  script:\n    - pip install -r requirements.txt\n    - python runner.py tests/suite.py \\\n        --add-gate cpu_max:90 \\\n        --add-gate memory_max_mb:1024 \\\n        --junit-output test-results.xml\n  artifacts:\n    reports:\n      junit: test-results.xml\n</code></pre>"},{"location":"cicd/#jenkins","title":"Jenkins","text":"<pre><code>pipeline {\n    agent any\n    stages {\n        stage('Test') {\n            steps {\n                sh 'pip install -r requirements.txt'\n                sh '''\n                    python runner.py tests/suite.py \\\n                        --add-gate cpu_max:90 \\\n                        --junit-output test-results.xml\n                '''\n            }\n        }\n    }\n    post {\n        always {\n            junit 'test-results.xml'\n        }\n    }\n}\n</code></pre>"},{"location":"cli-reference/","title":"CLI Reference","text":"<p>Complete command-line interface documentation</p>"},{"location":"cli-reference/#usage","title":"Usage","text":"<pre><code>python runner.py [SCRIPT] [OPTIONS]\n</code></pre>"},{"location":"cli-reference/#common-options","title":"Common Options","text":""},{"location":"cli-reference/#basic-options","title":"Basic Options","text":"Option Description <code>--help</code> Show help message <code>--version</code> Show version <code>--config FILE</code> Config file path <code>--json-output FILE</code> Output metrics as JSON <code>--junit-output FILE</code> Output as JUnit XML"},{"location":"cli-reference/#monitoring-options","title":"Monitoring Options","text":"Option Description <code>--history-db DB</code> SQLite database path <code>--detect-anomalies</code> Detect anomalies <code>--analyze-trend</code> Analyze trends <code>--detect-regression</code> Detect regressions"},{"location":"cli-reference/#alert-options","title":"Alert Options","text":"Option Description <code>--alert-config RULE</code> Add alert rule <code>--slack-webhook URL</code> Slack webhook URL <code>--email-to ADDR</code> Email recipient"},{"location":"cli-reference/#performance-gate-options","title":"Performance Gate Options","text":"Option Description <code>--add-gate METRIC:VALUE</code> Add performance gate <code>--fail-on-gate-failure</code> Exit with error on gate failure"},{"location":"cli-reference/#retry-options","title":"Retry Options","text":"Option Description <code>--retry-strategy STR</code> Retry strategy (linear/exponential/fibonacci) <code>--max-attempts N</code> Maximum retry attempts <code>--initial-delay SEC</code> Initial delay in seconds <code>--max-delay SEC</code> Maximum delay in seconds"},{"location":"cli-reference/#examples","title":"Examples","text":""},{"location":"cli-reference/#basic-execution","title":"Basic Execution","text":"<pre><code>python runner.py myscript.py\n</code></pre>"},{"location":"cli-reference/#with-monitoring","title":"With Monitoring","text":"<pre><code>python runner.py script.py \\\n    --history-db metrics.db \\\n    --detect-anomalies \\\n    --analyze-trend\n</code></pre>"},{"location":"cli-reference/#cicd-with-performance-gates","title":"CI/CD with Performance Gates","text":"<pre><code>python runner.py tests/suite.py \\\n    --add-gate cpu_max:90 \\\n    --add-gate memory_max_mb:1024 \\\n    --junit-output test-results.xml\n</code></pre>"},{"location":"cli-reference/#with-alerts","title":"With Alerts","text":"<pre><code>python runner.py script.py \\\n    --config config.yaml \\\n    --slack-webhook 'https://hooks.slack.com/...'\n</code></pre>"},{"location":"configuration/","title":"Configuration Guide","text":"<p>Complete guide to configuring Python Script Runner</p>"},{"location":"configuration/#configuration-file-format","title":"Configuration File Format","text":"<p>Configuration files can be in YAML or JSON format.</p>"},{"location":"configuration/#basic-structure","title":"Basic Structure","text":"<pre><code>alerts:\n  - name: alert_name\n    condition: metric &gt; threshold\n    channels: [email, slack]\n    severity: WARNING\n\nperformance_gates:\n  - metric_name: cpu_max\n    max_value: 90\n\nnotifications:\n  email:\n    smtp_server: smtp.gmail.com\n    smtp_port: 587\n    from: alerts@company.com\n\nretry:\n  strategy: exponential\n  max_attempts: 3\n</code></pre>"},{"location":"configuration/#alert-configuration","title":"Alert Configuration","text":"<pre><code>alerts:\n  - name: cpu_high\n    condition: cpu_max &gt; 85\n    channels: [email, slack]\n    severity: WARNING\n    enabled: true\n</code></pre>"},{"location":"configuration/#performance-gates","title":"Performance Gates","text":"<pre><code>performance_gates:\n  - metric_name: cpu_max\n    max_value: 90\n  - metric_name: memory_max_mb\n    max_value: 1024\n</code></pre>"},{"location":"configuration/#notifications-configuration","title":"Notifications Configuration","text":""},{"location":"configuration/#email","title":"Email","text":"<pre><code>notifications:\n  email:\n    smtp_server: smtp.gmail.com\n    smtp_port: 587\n    from: alerts@company.com\n    to: team@company.com\n    use_tls: true\n    username: your_email@gmail.com\n    password: your_app_password\n</code></pre>"},{"location":"configuration/#slack","title":"Slack","text":"<pre><code>notifications:\n  slack:\n    webhook_url: https://hooks.slack.com/services/YOUR/WEBHOOK\n    channel: '#alerts'\n    username: PSR Bot\n</code></pre>"},{"location":"configuration/#retry-configuration","title":"Retry Configuration","text":"<pre><code>retry:\n  strategy: exponential  # linear, exponential, fibonacci\n  max_attempts: 3\n  initial_delay: 2       # seconds\n  max_delay: 60          # seconds\n</code></pre>"},{"location":"installation/","title":"Installation Guide","text":""},{"location":"installation/#system-requirements","title":"System Requirements","text":""},{"location":"installation/#minimum","title":"Minimum","text":"<ul> <li>Python: 3.6+ (3.8+ recommended)</li> <li>OS: Linux, macOS, Windows (with WSL2)</li> <li>RAM: 256 MB minimum (512 MB recommended)</li> <li>Disk: ~50 MB for installation</li> </ul>"},{"location":"installation/#required-dependencies","title":"Required Dependencies","text":"<ul> <li>psutil (5.9.0+) - Process monitoring</li> <li>PyYAML (6.0+) - Config parsing</li> <li>requests (2.31.0+) - HTTP requests</li> </ul>"},{"location":"installation/#optional-dependencies","title":"Optional Dependencies","text":"<ul> <li>fastapi - Web dashboard</li> <li>pyarrow - Parquet export</li> <li>scikit-learn - ML features</li> </ul>"},{"location":"installation/#installation-steps","title":"Installation Steps","text":""},{"location":"installation/#method-1-from-repository","title":"Method 1: From Repository","text":"<pre><code>git clone https://github.com/jomardyan/Python-Script-Runner.git\ncd Python-Script-Runner\npip install -r requirements.txt\npython runner.py --version\n</code></pre>"},{"location":"installation/#method-2-virtual-environment-recommended","title":"Method 2: Virtual Environment (Recommended)","text":"<pre><code>python -m venv venv\nsource venv/bin/activate  # Windows: venv\\\\Scripts\\\\activate\npip install -r requirements.txt\n</code></pre>"},{"location":"installation/#method-3-pypy3-high-performance","title":"Method 3: PyPy3 (High Performance)","text":"<pre><code>bash setup_pypy3_env.sh\nsource .venv-pypy3/bin/activate\npypy3 runner.py myscript.py\n</code></pre>"},{"location":"installation/#method-4-docker","title":"Method 4: Docker","text":"<pre><code>docker build -t psr .\ndocker run --rm psr myscript.py\n</code></pre>"},{"location":"installation/#verification","title":"Verification","text":"<pre><code>python runner.py --version\npython runner.py --help\npython runner.py test_script.py\n</code></pre>"},{"location":"installation/#troubleshooting","title":"Troubleshooting","text":"<p>See Troubleshooting Guide for common issues.</p>"},{"location":"metrics/","title":"Metrics Reference","text":"<p>Complete guide to all metrics collected by Python Script Runner</p>"},{"location":"metrics/#overview","title":"Overview","text":"<p>Python Script Runner automatically collects 30 different metrics during script execution. All metrics are stored in SQLite database and available for analysis and alerting.</p>"},{"location":"metrics/#timing-metrics","title":"Timing Metrics","text":"Metric Type Description <code>start_time</code> float/int Start Time <code>end_time</code> float/int End Time <code>execution_time</code> float/int Execution Time"},{"location":"metrics/#cpu-metrics","title":"CPU Metrics","text":"Metric Type Description <code>cpu_max</code> float/int Cpu Max <code>cpu_avg</code> float/int Cpu Avg <code>cpu_min</code> float/int Cpu Min <code>user_time</code> float/int User Time <code>system_time</code> float/int System Time"},{"location":"metrics/#memory-metrics","title":"Memory Metrics","text":"Metric Type Description <code>memory_max</code> float/int Memory Max <code>memory_avg</code> float/int Memory Avg <code>memory_min</code> float/int Memory Min <code>page_faults</code> float/int Page Faults"},{"location":"metrics/#system-metrics","title":"System Metrics","text":"Metric Type Description <code>num_threads</code> float/int Num Threads <code>num_fds</code> float/int Num Fds <code>context_switches</code> float/int Context Switches <code>block_io</code> float/int Block Io"},{"location":"metrics/#output-metrics","title":"Output Metrics","text":"Metric Type Description <code>stdout_lines</code> float/int Stdout Lines <code>stderr_lines</code> float/int Stderr Lines <code>exit_code</code> float/int Exit Code <code>success</code> float/int Success"},{"location":"metrics/#querying-metrics","title":"Querying Metrics","text":""},{"location":"metrics/#via-historymanager","title":"Via HistoryManager","text":"<pre><code>from runner import HistoryManager\n\nmanager = HistoryManager('metrics.db')\nhistory = manager.get_execution_history('script.py', days=30)\nmetrics = manager.get_aggregated_metrics('script.py')\n</code></pre>"},{"location":"metrics/#via-timeseriesdb","title":"Via TimeSeriesDB","text":"<pre><code>from runner import TimeSeriesDB, HistoryManager\n\nhistory_manager = HistoryManager('metrics.db')\nts_db = TimeSeriesDB(history_manager)\nresults = ts_db.query(\n    metric_name='cpu_max',\n    script_path='script.py',\n    days=30\n)\n</code></pre>"},{"location":"metrics/#metric-aggregation","title":"Metric Aggregation","text":"<pre><code>aggs = ts_db.aggregations(\n    metric_name='execution_time_seconds',\n    script_path='script.py'\n)\n# Returns: min, max, avg, median, p50, p75, p90, p95, p99, stddev\n</code></pre>"},{"location":"quickstart/","title":"Quick Start","text":"<p>Get up and running in 5 minutes!</p>"},{"location":"quickstart/#installation","title":"Installation","text":"<pre><code>git clone https://github.com/jomardyan/Python-Script-Runner.git\ncd Python-Script-Runner\npip install -r requirements.txt\n</code></pre>"},{"location":"quickstart/#your-first-script","title":"Your First Script","text":"<p>Create <code>test_app.py</code>:</p> <pre><code>import time\nprint('Starting...')\nfor i in range(5):\n    print(f'Step {i+1}')\n    time.sleep(0.5)\nprint('Done!')\n</code></pre> <p>Run with monitoring:</p> <pre><code>python runner.py test_app.py\n</code></pre>"},{"location":"quickstart/#common-use-cases","title":"Common Use Cases","text":""},{"location":"quickstart/#cicd-with-performance-gates","title":"CI/CD with Performance Gates","text":"<pre><code>python runner.py tests/suite.py \\\\\n    --add-gate cpu_max:90 \\\\\n    --add-gate memory_max_mb:1024 \\\\\n    --junit-output results.xml\n</code></pre>"},{"location":"quickstart/#track-performance-over-time","title":"Track Performance Over Time","text":"<pre><code>python runner.py script.py \\\\\n    --history-db metrics.db \\\\\n    --detect-anomalies \\\\\n    --analyze-trend\n</code></pre>"},{"location":"quickstart/#slack-alerts","title":"Slack Alerts","text":"<pre><code>python runner.py script.py \\\\\n    --slack-webhook 'https://hooks.slack.com/services/YOUR/WEBHOOK'\n</code></pre>"},{"location":"quickstart/#next-steps","title":"Next Steps","text":"<ul> <li>\ud83d\udcd6 Installation</li> <li>\ud83d\udcda Usage Guide</li> <li>\ud83d\udd27 CLI Reference</li> <li>\u2699\ufe0f Configuration</li> </ul>"},{"location":"troubleshooting/","title":"Troubleshooting Guide","text":"<p>Solutions for common issues and problems</p>"},{"location":"troubleshooting/#installation-issues","title":"Installation Issues","text":""},{"location":"troubleshooting/#importerror-no-module-named-psutil","title":"ImportError: No module named 'psutil'","text":"<p>Problem: psutil dependency is not installed</p> <p>Solution: <pre><code>pip install psutil\n</code></pre></p>"},{"location":"troubleshooting/#importerror-no-module-named-yaml","title":"ImportError: No module named 'yaml'","text":"<p>Problem: PyYAML is not installed</p> <p>Solution: <pre><code>pip install pyyaml\n# Or use JSON config instead:\npython runner.py script.py --json-config config.json\n</code></pre></p>"},{"location":"troubleshooting/#runtime-issues","title":"Runtime Issues","text":""},{"location":"troubleshooting/#database-lock-error","title":"Database Lock Error","text":"<p>Problem: <code>sqlite3.OperationalError: database is locked</code></p> <p>Causes: - Multiple processes accessing database simultaneously - Corrupted WAL files</p> <p>Solutions: <pre><code># Remove lock files\nrm -f script_runner_history.db-wal\nrm -f script_runner_history.db-shm\n\n# Or use separate database per process\npython runner.py script.py --history-db metrics_$$.db\n</code></pre></p>"},{"location":"troubleshooting/#memory-usage-growing","title":"Memory Usage Growing","text":"<p>Problem: Script Runner using too much memory</p> <p>Solutions: - Disable real-time monitoring if not needed - Archive old database records - Use smaller retention period</p>"},{"location":"troubleshooting/#alerts-not-triggering","title":"Alerts Not Triggering","text":"<p>Problem: Alert conditions met but no alerts sent</p> <p>Solutions: - Check alert configuration syntax - Verify notification credentials (email, Slack) - Check network connectivity - Enable debug logging</p>"},{"location":"troubleshooting/#monitoring-issues","title":"Monitoring Issues","text":""},{"location":"troubleshooting/#high-cpu-usage","title":"High CPU Usage","text":"<p>Problem: Script Runner using high CPU</p> <p>Solutions: - Reduce monitoring frequency - Disable unnecessary features - Use PyPy for faster execution</p>"},{"location":"troubleshooting/#missing-metrics","title":"Missing Metrics","text":"<p>Problem: Some metrics not collected</p> <p>Solutions: - Check script execution time (need minimum time for sampling) - Verify monitoring is enabled - Check for process termination</p>"},{"location":"troubleshooting/#performance-issues","title":"Performance Issues","text":""},{"location":"troubleshooting/#slow-query-performance","title":"Slow Query Performance","text":"<p>Problem: Database queries are slow</p> <p>Solutions: <pre><code># Archive old data\npython runner.py --archive-db metrics.db --days 90\n\n# Vacuum database\nsqlite3 metrics.db \"VACUUM;\"\n</code></pre></p>"},{"location":"troubleshooting/#debugging","title":"Debugging","text":""},{"location":"troubleshooting/#enable-debug-logging","title":"Enable Debug Logging","text":"<pre><code>import logging\nlogging.basicConfig(level=logging.DEBUG)\n\nfrom runner import ScriptRunner\nrunner = ScriptRunner('script.py')\nresult = runner.execute()\n</code></pre>"},{"location":"troubleshooting/#check-database","title":"Check Database","text":"<pre><code># List tables\nsqlite3 metrics.db \".tables\"\n\n# Check recent executions\nsqlite3 metrics.db \"SELECT * FROM executions LIMIT 5;\"\n</code></pre>"},{"location":"usage/","title":"Usage Guide","text":"<p>Common usage scenarios and best practices</p>"},{"location":"usage/#basic-usage","title":"Basic Usage","text":"<pre><code>python runner.py myscript.py\n</code></pre>"},{"location":"usage/#with-arguments","title":"With Arguments","text":"<pre><code>python runner.py train.py --epochs 100 --batch-size 32\n</code></pre>"},{"location":"usage/#continuous-monitoring","title":"Continuous Monitoring","text":"<pre><code>python runner.py script.py \\\n    --history-db metrics.db \\\n    --detect-anomalies \\\n    --analyze-trend\n</code></pre>"},{"location":"usage/#cicd-integration","title":"CI/CD Integration","text":"<pre><code>python runner.py tests/suite.py \\\n    --add-gate cpu_max:90 \\\n    --add-gate memory_max_mb:1024 \\\n    --junit-output results.xml\n</code></pre>"},{"location":"usage/#remote-execution","title":"Remote Execution","text":"<pre><code>python runner.py script.py \\\n    --ssh-host prod.example.com \\\n    --ssh-user deploy \\\n    --ssh-key ~/.ssh/id_rsa\n</code></pre>"}]}